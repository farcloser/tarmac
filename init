#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail -o monitor
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# Tarmac - a very small piece of shcript to scaffold macos machines
# (c) 2024 Farcloser <apostasie@farcloser.world>
# (c) 2019 Dubo Dubon Duponey <dubodubonduponey+github@pm.me>
# Distributed under the terms of the MIT license
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

readonly COLOR_RED=1
readonly COLOR_GREEN=2
readonly COLOR_YELLOW=3

# Prefix a date to a log line and output to stderr
logger::stamp(){
  local color="$1"
  local level="$2"
  local i
  shift
  shift

  [ ! "$TERM" ] || [ ! -t 2 ] || >&2 tput setaf "$color" 2>/dev/null || true
  for i in "$@"; do
    >&2 printf "[%s] [%s] %s\n" "$(date 2>/dev/null || true)" "$level" "$i"
  done
  [ ! "$TERM" ] || [ ! -t 2 ] || >&2 tput op 2>/dev/null || true
}

logger::info(){
  logger::stamp "$COLOR_GREEN" "INFO" "$@"
}

logger::warning(){
  logger::stamp "$COLOR_YELLOW" "WARNING" "$@"
}

logger::error(){
  logger::stamp "$COLOR_RED" "ERROR" "$@"
}

fs::ensuredir(){
  local pth="$1"
  mkdir -p "$pth" 2>/dev/null
  [ -d "$pth" ] || {
    logger::error "Failed to create $pth. Check your permissions."
    return 1
  }
}

curl::get(){
  local url="$1"
  logger::info "Downloading $url\n"
  # 2024-04 Github still does not offer tls 1.3
  curl --proto '=https' --tlsv1.2 -sSfL --compressed "$url"
}

install::commandlinetools(){
  while ! git --help 1>/dev/null 2>&1; do
    logger::warning "You need to install XCode command line tools. You should be prompted to do so now."
    logger::info "Hit enter after the installation completes."
    xcode-select --install
    read -r
  done
  #logger::info "Command line tools is installed. Now ensuring it is selected (need privileges for this):"
  #sudo xcode-select --switch /Library/Developer/CommandLineTools
}

# Source profile if here
# shellcheck source=/dev/null
[ ! -f "$HOME/.profile" ] || . "$HOME/.profile"

# If we have homebrew already, just stop
! command -v brew 1>/dev/null || [ "${TARMAC_FORCE_INSTALL:-}" ] || {
    logger::info "Homebrew is installed on this system."
    exit
}

install::commandlinetools

logger::warning "You are missing homebrew. Going to install."

[ ! "${HOMEBREW_GITHUB_API_TOKEN+x}" ] && printf "%s" " > Your github api token for homebrew: " && read -r HOMEBREW_GITHUB_API_TOKEN
[ ! "${POSH_BIN+x}" ]   && printf "%s" " > Where to install homebrew [default to $HOME/Applications]: " && read -r POSH_BIN
[ ! "${POSH_TMP+x}" ]   && printf "%s" " > Where to hold temporary files for homebrew [default to $HOME/transient/tmp]: " && read -r POSH_TMP
[ ! "${POSH_CACHE+x}" ]   && printf "%s" " > Where to hold temporary files for homebrew [default to $HOME/transient/cache]: " && read -r POSH_CACHE
[ ! "${POSH_LOG+x}" ]   && printf "%s" " > Where to hold temporary files for homebrew [default to $HOME/transient/log]: " && read -r POSH_LOG

fs::ensuredir "${POSH_BIN:-$HOME/Applications}/homebrew"
fs::ensuredir "${POSH_BIN:-$HOME/Applications}/app"
fs::ensuredir "${POSH_BIN:-$HOME/Applications}/fonts"
fs::ensuredir "${POSH_TMP:-$HOME/transient/tmp}/homebrew"
fs::ensuredir "${POSH_CACHE:-$HOME/transient/cache}/homebrew"
fs::ensuredir "${POSH_LOG:-$HOME/transient/log}/homebrew"

curl::get https://github.com/Homebrew/brew/tarball/master 2>/dev/null | tar xz --strip 1 -C "${POSH_BIN:-$HOME/Applications}/homebrew"

if [ ! -f "${POSH_BIN:-$HOME/Applications}/homebrew/bin/brew" ]; then
  logger::error "Failed to retrieve homebrew from github. Not sure what went wrong."
  exit 1
fi

cat <<-EOF > "$HOME/.posh_brew"
#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail -o monitor
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# ★ Kingpin             ★
# ★ (c) 2024 Farcloser ★
# ★ MIT License         ★
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

# Put homebrew in the path
export PATH="\${POSH_BIN:-\$HOME/Applications}/homebrew/bin:\${POSH_BIN:-\$HOME/Applications}/homebrew/sbin:\${PATH}"

# Define environment
export HOMEBREW_EDITOR="\${POSH_EDITOR:-nano}"
export HOMEBREW_CACHE="\${POSH_CACHE:-\$HOME/transient/cache}/homebrew"
export HOMEBREW_TEMP="\${POSH_TMP:-\$HOME/transient/tmp}/homebrew"
export HOMEBREW_LOGS="\${POSH_LOG:-\$HOME/transient/log}/homebrew"
export HOMEBREW_CASK_OPTS="--appdir=\${POSH_BIN:-\$HOME/Applications}/app --fontdir=\${POSH_BIN:-\$HOME/Applications}/fonts"

# Get bash completion if we are on bash, but...
# be careful, as it uses unset variables, and seems to be returning non zero
set +o errexit +o nounset
# shellcheck source=/dev/null
[[ "\${POSH_SHELL:-}" != bash ]] || {
  bash_completion="\$(brew --prefix 2>/dev/null || true)"/etc/profile.d/bash_completion.sh
  [[ ! -r "\$bash_completion" ]] || . "\$bash_completion"
}
set -o errexit -o nounset
EOF

# shellcheck source=/dev/null
. "$HOME/.posh_brew"

brew update
brew install bash-completion zsh-completions

touch "$HOME/.profile"
grep -q "POSH_EDITOR" "$HOME/.profile" || printf "export POSH_EDITOR=\"%s\"\n" "nano" >> "$HOME/.profile"
grep -q "POSH_BIN" "$HOME/.profile" || printf "export POSH_BIN=\"%s\"\n" "${POSH_BIN:-\$HOME/Applications}" >> "$HOME/.profile"
grep -q "POSH_TMP" "$HOME/.profile" || printf "export POSH_TMP=\"%s\"\n" "${POSH_TMP:-\$HOME/transient/tmp}" >> "$HOME/.profile"
grep -q "POSH_CACHE" "$HOME/.profile" || printf "export POSH_CACHE=\"%s\"\n" "${POSH_TMP:-\$HOME/transient/cache}" >> "$HOME/.profile"
grep -q "POSH_LOG" "$HOME/.profile" || printf "export POSH_LOG=\"%s\"\n" "${POSH_TMP:-\$HOME/transient/log}" >> "$HOME/.profile"
grep -q 'while read -r line; do . "$line"; done < <(ls "$HOME"/.posh_*)' "$HOME/.profile" || printf 'while read -r line; do . "$line"; done < <(ls "$HOME"/.posh_*)' >> "$HOME/.profile"

[ -e "$HOME/.posh_secrets" ] || {
  cat <<-EOF > "$HOME/.posh_secrets"
#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail -o monitor
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# ★ Kingpin             ★
# ★ (c) 2024 Farcloser ★
# ★ MIT License         ★
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

EOF
}
grep -q "HOMEBREW_GITHUB_API_TOKEN" "$HOME/.posh_secrets" || printf "export HOMEBREW_GITHUB_API_TOKEN=\"%s\"\n" "$HOMEBREW_GITHUB_API_TOKEN" >> "$HOME/.posh_secrets"

[ -e "$HOME/.posh_x" ] || {
  cat <<-EOF > "$HOME/.posh_x"
#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail -o monitor
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# ★ Kingpin             ★
# ★ (c) 2024 Farcloser ★
# ★ MIT License         ★
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

# Brew completion has unset variables - generally, scripts cannot be trusted with these...
set +o nounset +o errexit
EOF
}

logger::info "Brew successfully installed. You should now source ~/.profile - and install any required formula"
