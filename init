#!/usr/bin/env bash
set -o errexit -o errtrace -o functrace -o nounset -o pipefail
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# Tarmac - a very small piece of shcript to wrap brew installation
# (c) 2019 Dubo Dubon Duponey <dubodubonduponey+github@pm.me>
# Distributed under the terms of the MIT license
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

COLOR_RED=1
COLOR_GREEN=2
COLOR_YELLOW=3

# Prefix a date to a log line and output to stderr
logger::stamp(){
  local color="$1"
  local level="$2"
  local i
  shift
  shift
  [ "$TERM" ] && [ -t 2 ] && >&2 tput setaf "$color"
  for i in "$@"; do
    >&2 printf "[%s] [%s] %s\n" "$(date)" "$level" "$i"
  done
  [ "$TERM" ] && [ -t 2 ] && >&2 tput op
}

logger::info(){
  logger::stamp "$COLOR_GREEN" "INFO" "$@"
}

logger::warning(){
  logger::stamp "$COLOR_YELLOW" "WARNING" "$@"
}

logger::error(){
  logger::stamp "$COLOR_RED" "ERROR" "$@"
}

curl::get(){
  >&2 printf " > Downloading %s\n" "$@"
  curl --proto '=https' --tlsv1.3 -sSfL --compressed "$1"
}

# Source profile if here
# shellcheck source=/dev/null
[ ! -f "$HOME/.profile" ] || {
  set +eu
  . "$HOME/.profile"
  set -o errexit -o errtrace -o functrace -o nounset -o pipefail
}

# Enforce XCode command line tools to be here
while ! git --help 1>/dev/null 2>&1; do
  logger::warning "You need to install XCode command line tools. You should be prompted to do so now."
  logger::info "Hit enter when XCode installation completes."
  xcode-select --install
  read -r
done

logger::info "XCode command line tools is properly installed."

if command -v brew 1>/dev/null; then
  if [ ! "$TARMAC_FORCE_INSTALL" ]; then
    logger::info "Homebrew is installed on this system."
    exit
  fi
fi

logger::info "Selecting with xcode-select now:"
sudo xcode-select --switch /Library/Developer/CommandLineTools

# Have homebrew if not here
logger::warning "You are missing homebrew. Going to install."

[ ! "${POSH_TOKEN+x}" ] && printf "%s" " > Your github api token for homebrew: " && read -r POSH_TOKEN
[ ! "${POSH_TMP+x}" ]   && printf "%s" " > Where to hold temporary files for homebrew [default to $HOME/tmp]: " && read -r POSH_TMP
[ ! "${POSH_BIN+x}" ]   && printf "%s" " > Where to install homebrew [default to $HOME/Applications/bin]: " && read -r POSH_BIN
[ ! "${POSH_CASK+x}" ]  && printf "%s" " > Where to install casks [default to $HOME/Applications/cask]: " && read -r POSH_CASK

POSH_TMP="${POSH_TMP:-$HOME/tmp}"
POSH_BIN="${POSH_BIN:-$HOME/Applications/bin}"
POSH_CASK="${POSH_CASK:-$HOME/Applications/cask}"

mkdir -p "${POSH_BIN}/homebrew" 2>/dev/null
mkdir -p "${POSH_TMP}/cache/homebrew" 2>/dev/null
mkdir -p "${POSH_TMP}/tmp/homebrew" 2>/dev/null
mkdir -p "${POSH_TMP}/log/homebrew" 2>/dev/null
mkdir -p "${POSH_CASK}/app" 2>/dev/null
mkdir -p "${POSH_CASK}/fonts" 2>/dev/null

if  [ ! -d "${POSH_BIN}/homebrew" ] || \
    [ ! -d "${POSH_TMP}/cache/homebrew" ] || \
    [ ! -d "${POSH_TMP}/tmp/homebrew" ] || \
    [ ! -d "${POSH_TMP}/log/homebrew" ] || \
    [ ! -d "${POSH_CASK}/app" ] || \
    [ ! -d "${POSH_CASK}/fonts" ]; then
  logger::error "Failed to create folders. Check your permissions."
  exit 1
fi

curl::get https://github.com/Homebrew/brew/tarball/master 2>/dev/null | tar xz --strip 1 -C "${POSH_BIN}/homebrew"

if [ ! -f "${POSH_BIN}/homebrew/bin/brew" ]; then
  logger::error "Failed to retrieve homebrew from github. Not sure what went wrong."
  exit 1
fi

rm -Rf "${POSH_BIN}/homebrew/share/doc/homebrew"

cat <<-EOF > "$HOME/.posh_brew"
#!/usr/bin/env bash
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# ★ kingpin ＆ homebrew        ★
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★

export POSH_TMP="${POSH_TMP}"
export POSH_BIN="${POSH_BIN}"

export PATH="\${POSH_BIN}/homebrew/bin:\${POSH_BIN}/homebrew/sbin:\${PATH}"
export HOMEBREW_GITHUB_API_TOKEN="\${HOMEBREW_GITHUB_API_TOKEN:-${POSH_TOKEN}}"
export HOMEBREW_CACHE="\${POSH_TMP}/cache/homebrew"
export HOMEBREW_TEMP="\${POSH_TMP}/tmp/homebrew"
export HOMEBREW_LOGS="\${POSH_TMP}/log/homebrew"
export HOMEBREW_CASK_OPTS="--appdir=\$HOME/Applications/cask/app --fontdir=\$HOME/Applications/cask/fonts"
EOF

# shellcheck source=/dev/null
. "$HOME/.posh_brew"

"${POSH_BIN}/homebrew/bin/brew" update
"${POSH_BIN}/homebrew/bin/brew" install bash-completion

touch "$HOME/.profile"
if ! grep -q "posh_brew" "$HOME/.profile"; then
  cat <<-EOF >> "$HOME/.profile"
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# ★ tarmac                     ★
# ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★
# shellcheck source=$HOME/.posh_brew
. "\$HOME/.posh_brew"
EOF
fi

cat <<-EOF >> "$HOME/.posh_brew"
if [ ! "\${POSH_BREW_COMPLETION:-}" ]; then
  # BASH_COMPLETION is unbound, and other problems in that script so, ignore
  set +eu
  # shellcheck source=/dev/null
  . "\$(brew --prefix)/etc/profile.d/bash_completion.sh"
  set -eu
  export POSH_BREW_COMPLETION=true
fi
EOF

logger::info "Brew successfully installed. You should now source ~/.profile."
